<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.hanju.productBoard.mapper.SaleMapper">
	<!-- 전체상품(전통주, 일반구매) -->
	<select id="getProductList" parameterType="hashmap" resultType="com.example.hanju.productBoard.model.entity.SaleModel">
		SELECT 
			PRODUCT_NAME, 
			TO_CHAR(PRICE, 'FM99,999') AS PRICE_COMMA, 
			MADE_BY, 
			ALCOHOL,
			FILE_ORG_NAME, 
			FILE_PATH, 
			SELL_ID, 
			NS.PRODUCT_ID, 
			TO_CHAR(NVL(AVG, 0), 'FM0.00') AS AVERAGE, 
			NVL(COMENT_CNT, 0) AS COMENT_CNT, 
			NS.DISCOUNT, 
			PRICE,
			TO_CHAR((PRICE - (PRICE * (DISCOUNT / 100))), 'FM99,999') AS DISCOUNT_PRICE
		FROM HANJU_NORMAL_SELL NS
		INNER JOIN HANJU_PRODUCT P ON P.PRODUCT_ID = NS.PRODUCT_ID
		LEFT JOIN HANJU_IMAGE I ON P.PRODUCT_ID = I.FK_ID
		INNER JOIN HANJU_CODE C ON P.TYPE = C.CODE
		LEFT JOIN ( 
		    SELECT B.PRODUCT_ID AS PRODUCT_ID, ROUND(AVG(GRADE), 2) AS AVG
		    FROM HANJU_BILL B
		    INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
		    INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
		    WHERE P.TYPE NOT IN ('WW', 'RW')
		    GROUP BY B.PRODUCT_ID
		) AVG ON NS.PRODUCT_ID = AVG.PRODUCT_ID
		LEFT JOIN ( 
		    SELECT B.PRODUCT_ID, COUNT(GRADE) AS COMENT_CNT
		    FROM HANJU_BILL B
		    INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
		    INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
		    WHERE P.TYPE NOT IN ('WW', 'RW')
		    GROUP BY B.PRODUCT_ID
		) CNT ON AVG.PRODUCT_ID = CNT.PRODUCT_ID
		WHERE I.FILE_STATUS = 'T' AND C.PARENT_CODE = 'T'
		OFFSET #{start} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 전체상품 > 전통주 -->
	<select id="getTradAlcohol" parameterType="hashmap" resultType="com.example.hanju.productBoard.model.entity.SaleModel">
	    SELECT 
	    	PRODUCT_NAME, 
			TO_CHAR(PRICE, 'FM99,999') AS PRICE_COMMA, 
			MADE_BY, 
			ALCOHOL,
			FILE_ORG_NAME, 
			FILE_PATH, 
			SELL_ID, 
			NS.PRODUCT_ID, 
			TO_CHAR(NVL(AVG, 0), 'FM0.00') AS AVERAGE, 
			NVL(COMENT_CNT, 0) AS COMENT_CNT, 
			NS.DISCOUNT, 
			PRICE,
			TO_CHAR((PRICE - (PRICE * (DISCOUNT / 100))), 'FM99,999') AS DISCOUNT_PRICE
		FROM HANJU_NORMAL_SELL NS
		INNER JOIN HANJU_PRODUCT P ON P.PRODUCT_ID = NS.PRODUCT_ID
		LEFT JOIN HANJU_IMAGE I ON P.PRODUCT_ID = I.FK_ID
		INNER JOIN HANJU_CODE C ON P.TYPE = C.CODE
		LEFT JOIN (
		    SELECT B.PRODUCT_ID AS PRODUCT_ID, ROUND(AVG(GRADE), 2) AS AVG
		    FROM HANJU_BILL B
		    INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
		    INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
		    WHERE P.TYPE NOT IN ('WW', 'RW')
		    GROUP BY B.PRODUCT_ID
		) AVG ON NS.PRODUCT_ID = AVG.PRODUCT_ID
		LEFT JOIN ( 
		    SELECT B.PRODUCT_ID, COUNT(GRADE) AS COMENT_CNT
		    FROM HANJU_BILL B
		    INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
		    INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
		    WHERE P.TYPE NOT IN ('WW', 'RW')
		    GROUP BY B.PRODUCT_ID
		) CNT ON AVG.PRODUCT_ID = CNT.PRODUCT_ID
	    <where>
	        I.FILE_STATUS = 'T'
	        <!-- P.TYPE이 codeList에 있을 경우 -->
	        <if test="codeList != null">
	            AND P.TYPE IN 
	            <foreach collection="codeList" item="item" open="(" close=")" separator=",">
	                #{item}
	            </foreach>
	        </if>
	        
	        <!-- 알코올 도수 -->
	        <if test="alcohol != null">
	            <choose>
	                <when test="alcohol == 1">AND (ALCOHOL >= 0 AND 10 > ALCOHOL)</when>
	                <when test="alcohol == 2">AND (ALCOHOL >= 10 AND 20 > ALCOHOL)</when>
	                <when test="alcohol == 3">AND (ALCOHOL >= 20 AND 30 > ALCOHOL)</when>
	                <when test="alcohol == 4">AND (ALCOHOL >= 30)</when>
	            </choose>
	        </if>
	
	        <!-- 당도 -->
	        <if test="sweet != null">
	            <choose>
	                <when test="sweet == 1">AND (SWEET = 1 OR SWEET = 2)</when>
	                <when test="sweet == 2">AND (SWEET = 3)</when>
	                <when test="sweet == 3">AND (SWEET = 4 OR SWEET = 5)</when>
	            </choose>
	        </if>
	
	        <!-- 산미 -->
	        <if test="sour != null">
	            <choose>
	                <when test="sour == 1">AND (SOUR = 1 OR SOUR = 2)</when>
	                <when test="sour == 2">AND (SOUR = 3)</when>
	                <when test="sour == 3">AND (SOUR = 4 OR SOUR = 5)</when>
	            </choose>
	        </if>
	
	        <!-- 바디감 -->
	        <if test="body != null">
	            <choose>
	                <when test="body == 1">AND (BODY = 1 OR BODY = 2)</when>
	                <when test="body == 2">AND (BODY = 3)</when>
	                <when test="body == 3">AND (BODY = 4 OR BODY = 5)</when>
	            </choose>
	        </if>
	
	        <!-- 용량 -->
	        <if test="capacity != null">
	            <choose>
	                <when test="capacity == 1">AND (400 > CAPACITY)</when>
	                <when test="capacity == 2">AND (CAPACITY >= 400 AND 700 > CAPACITY)</when>
	                <when test="capacity == 3">AND (CAPACITY >= 700)</when>
	            </choose>
	        </if>
	        
	        <!-- 원료 -->
	        <if test="material != null">
	            <choose>
	                <when test="material == 1">AND MATERIAL = '사과'</when>
	                <when test="material == 2">AND MATERIAL = '배'</when>
	                <when test="material == 3">AND MATERIAL = '고구마'</when>
	                <when test="material == 4">AND MATERIAL = '유자'</when>
	                <when test="material == 5">AND (MATERIAL LIKE '%딸기%' OR MATERIAL = '복분자' OR MATERIAL LIKE '%베리%')</when>
	                <when test="material == 6">AND MATERIAL = '무화과'</when>
	                <when test="material == 7">AND MATERIAL = '레몬'</when>
	                <when test="material == 8">AND MATERIAL = '복숭아'</when>
	                <when test="material == 9">AND MATERIAL = '단호박'</when>
	                <when test="material == 10">AND MATERIAL NOT LIKE '%베리%' AND MATERIAL NOT IN ('사과', '배', '고구마', '유자', '딸기', '복분자', '무화과', '레몬', '복숭아', '단호박')</when>
	            </choose>
	        </if>
	        
	        <!-- 생산지 -->
	        <if test="madeBy != ''">
	        	AND MADE_BY LIKE '%'||#{madeBy}||'%'
	        </if>
	        AND NOT (P.TYPE = 'G' OR C.PARENT_CODE = 'W')
	    </where>
	</select>
	
	<!-- 전체상품 > 선택 코드 리스트 -->
	<select id="selectCodeList" parameterType="hashmap" resultType="com.example.hanju.productBoard.model.entity.SaleCodeModel">
		SELECT C1.KIND, C2.CODE_NAME, C2.CODE
		FROM HANJU_CODE C1
		INNER JOIN HANJU_CODE C2 ON C1.CODE = C2.PARENT_CODE
		WHERE C1.KIND = 'IMAGE_STATUS' AND NOT C2.CODE = 'G'
	</select>
	
	<!-- 전통주 생산지 리스트 -->
	<select id="getMadeByList" parameterType="hashmap" resultType="com.example.hanju.productBoard.model.entity.SaleModel">
		SELECT SUBSTR(MADE_BY, 0, 2) AS MADE_BY
		FROM HANJU_NORMAL_SELL NS
		INNER JOIN HANJU_PRODUCT P ON P.PRODUCT_ID = NS.PRODUCT_ID
		INNER JOIN HANJU_CODE C ON P.TYPE = C.CODE
		WHERE C.PARENT_CODE = 'T'
		GROUP BY SUBSTR(MADE_BY, 0, 2)
		ORDER BY MADE_BY ASC
	</select>

	<!-- 전체상품 > 선물세트 -->
	<select id="getGiftSet" parameterType="hashmap" resultType="com.example.hanju.productBoard.model.entity.SaleModel">
		SELECT 
			PRODUCT_NAME, 
			TO_CHAR(PRICE, 'FM99,999') AS PRICE_COMMA, 
			MADE_BY, 
			ALCOHOL,
			FILE_ORG_NAME, 
			FILE_PATH, 
			SELL_ID, 
			NS.PRODUCT_ID, 
			TO_CHAR(NVL(AVG, 0), 'FM0.00') AS AVERAGE, 
			NVL(COMENT_CNT, 0) AS COMENT_CNT, 
			NS.DISCOUNT, 
			PRICE,
			TO_CHAR((PRICE - (PRICE * (DISCOUNT / 100))), 'FM99,999') AS DISCOUNT_PRICE
		FROM HANJU_NORMAL_SELL NS
		INNER JOIN HANJU_PRODUCT P ON P.PRODUCT_ID = NS.PRODUCT_ID
		LEFT JOIN HANJU_IMAGE I ON P.PRODUCT_ID = I.FK_ID
		INNER JOIN HANJU_CODE C ON P.TYPE = C.CODE
		LEFT JOIN (
		    SELECT B.PRODUCT_ID AS PRODUCT_ID, ROUND(AVG(GRADE), 2) AS AVG
		    FROM HANJU_BILL B
		    INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
		    INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
		    WHERE P.TYPE NOT IN ('WW', 'RW')
		    GROUP BY B.PRODUCT_ID
		) AVG ON NS.PRODUCT_ID = AVG.PRODUCT_ID
		LEFT JOIN ( 
		    SELECT B.PRODUCT_ID, COUNT(GRADE) AS COMENT_CNT
		    FROM HANJU_BILL B
		    INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
		    INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
		    WHERE P.TYPE NOT IN ('WW', 'RW')
		    GROUP BY B.PRODUCT_ID
		) CNT ON AVG.PRODUCT_ID = CNT.PRODUCT_ID
	    WHERE I.FILE_STATUS = 'T' AND P.TYPE = 'G' AND C.PARENT_CODE = 'T'
	</select>
	
	<!-- 신상품 목록 -->
	<select id="newProducts" parameterType="hashmap" resultType="com.example.hanju.productBoard.model.entity.SaleModel">
		SELECT 
			PRODUCT_NAME, 
			TO_CHAR(PRICE, 'FM99,999') AS PRICE_COMMA, 
			MADE_BY, 
			ALCOHOL,
			FILE_ORG_NAME, 
			FILE_PATH, 
			SELL_ID, 
			NS.PRODUCT_ID, 
			TO_CHAR(NVL(AVG, 0), 'FM0.00') AS AVERAGE, 
			NVL(COMENT_CNT, 0) AS COMENT_CNT, 
			NS.DISCOUNT, 
			PRICE,
			TO_CHAR((PRICE - (PRICE * (DISCOUNT / 100))), 'FM99,999') AS DISCOUNT_PRICE
		FROM HANJU_NORMAL_SELL NS
		INNER JOIN HANJU_PRODUCT P ON P.PRODUCT_ID = NS.PRODUCT_ID
		LEFT JOIN HANJU_IMAGE I ON P.PRODUCT_ID = I.FK_ID
		INNER JOIN HANJU_CODE C ON P.TYPE = C.CODE
		LEFT JOIN (
		    SELECT B.PRODUCT_ID AS PRODUCT_ID, ROUND(AVG(GRADE), 2) AS AVG
		    FROM HANJU_BILL B
		    INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
		    INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
		    WHERE P.TYPE NOT IN ('WW', 'RW')
		    GROUP BY B.PRODUCT_ID
		) AVG ON NS.PRODUCT_ID = AVG.PRODUCT_ID
		LEFT JOIN ( 
		    SELECT B.PRODUCT_ID, COUNT(GRADE) AS COMENT_CNT
		    FROM HANJU_BILL B
		    INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
		    INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
		    WHERE P.TYPE NOT IN ('WW', 'RW')
		    GROUP BY B.PRODUCT_ID
		) CNT ON AVG.PRODUCT_ID = CNT.PRODUCT_ID
		WHERE I.FILE_STATUS = 'T' AND 10 >= ROWNUM AND NOT C.PARENT_CODE = 'W'
		ORDER BY NS.SELL_ID DESC
	</select>
	
	<!-- 구독 리스트 -->
	<select id="subscribeList" parameterType="hashmap" resultType="Subscribe">
		SELECT 
			S.SUBSCRIBE_ID, 
			S.TITLE, 
			S.DISCOUNT, 
			S.CDATETIME, 
			S.ARRIVE_DATE, 
			I.FILE_PATH, 
			P.PRICE
		FROM HANJU_SUBSCRIBE S
		INNER JOIN HANJU_IMAGE I ON S.SUBSCRIBE_ID = I.FK_ID
		INNER JOIN
		(SELECT S.SUBSCRIBE_ID,SUM(P.PRICE) PRICE
		FROM HANJU_SUBSCRIBE S
		INNER JOIN HANJU_SUBSCRIBE_ITEM SI ON SI.SUBSCRIBE_ID = S.SUBSCRIBE_ID
		INNER JOIN HANJU_PRODUCT P ON P.PRODUCT_ID = SI.PRODUCT_ID
		GROUP BY S.SUBSCRIBE_ID) P ON P.SUBSCRIBE_ID = S.SUBSCRIBE_ID
		WHERE I.FILE_STATUS = 'T'
	</select>
	
	<!-- 일반 판매 데이터 개수 -->
	<select id="getTotalNormalSell" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*)
		FROM HANJU_NORMAL_SELL NS
		INNER JOIN HANJU_PRODUCT P ON P.PRODUCT_ID = NS.PRODUCT_ID
		LEFT JOIN HANJU_IMAGE I ON P.PRODUCT_ID = I.FK_ID
		INNER JOIN HANJU_CODE C ON P.TYPE = C.CODE
		WHERE I.FILE_STATUS = 'T' AND C.PARENT_CODE = 'T'
	</select>
	
	<!-- 베스트 셀러 -->
	<select id="getBestSellerProducts" parameterType="hashmap" resultType="com.example.hanju.productBoard.model.entity.SaleModel">
		SELECT  
			NS.SELL_ID, 
			P.PRODUCT_NAME, 
			TO_CHAR(PRICE, 'FM99,999') AS PRICE_COMMA, 
			NS.DISCOUNT, 
			I.FILE_PATH, 
			P.PRODUCT_ID, 
			ALCOHOL, 
			MADE_BY, 
			TO_CHAR(NVL(AVG, 0), 'FM0.00') AS AVERAGE, 
			NVL(COMENT_CNT, 0) AS COMENT_CNT,
			TO_CHAR((PRICE - (PRICE * (DISCOUNT / 100))), 'FM99,999') AS DISCOUNT_PRICE
		FROM (
			SELECT  PRODUCT_ID, KIND, COUNT(*) AS CNT
		    FROM    HANJU_BILL
		    WHERE   KIND = 'N'
		    GROUP BY PRODUCT_ID, KIND
		    ORDER BY CNT DESC
		    OFFSET 0 ROWS FETCH FIRST 10 ROWS ONLY
		) BEST
		INNER JOIN HANJU_PRODUCT P ON BEST.PRODUCT_ID = P.PRODUCT_ID
		INNER JOIN HANJU_NORMAL_SELL NS ON BEST.PRODUCT_ID = NS.PRODUCT_ID
		INNER JOIN HANJU_IMAGE I ON P.PRODUCT_ID = I.FK_ID AND I.FILE_STATUS = 'T'
        LEFT JOIN (
            SELECT B.PRODUCT_ID AS PRODUCT_ID, ROUND(AVG(GRADE), 2) AS AVG
            FROM HANJU_BILL B
            INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
            INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
            WHERE P.TYPE NOT IN ('WW', 'RW')
            GROUP BY B.PRODUCT_ID
        ) AVG ON NS.PRODUCT_ID = AVG.PRODUCT_ID
        LEFT JOIN ( 
		    SELECT B.PRODUCT_ID, COUNT(GRADE) AS COMENT_CNT
		    FROM HANJU_BILL B
		    INNER JOIN HANJU_COMMENT C ON B.BILL_ID = C.BILL_ID
		    INNER JOIN HANJU_PRODUCT P ON B.PRODUCT_ID = P.PRODUCT_ID
		    WHERE P.TYPE NOT IN ('WW', 'RW')
		    GROUP BY B.PRODUCT_ID
		) CNT ON AVG.PRODUCT_ID = CNT.PRODUCT_ID
	</select>
</mapper>